/-
  Module `data.function`, defining some functions for better composability
  and/or/readability.
-/
export {_<|_, _<<_}

/--
  ---

  Function composition defined as $(g \circ f)(x) = g(f(x))$.
-/
#[inline, infixr 1]
let _<<_ 
  {e e' : effect} {a b c : type} 
  (g : b -> e' c) (f : a -> e b) (x : a)
  : < | e, e' > c :=

  g <| f x 

/--
  ---

  Function application defined as an infix operator for convenience.
-/
#[infixl 0]
let _<|_ 
  {e : effect} {a b : type}
  (f : a -> e b) (x : a)
  : e b :=

  f x 

/-- 
  ---
  
  Flip function arguments to compose better with other functions.
-/
#[inline]
let flip
  {e : effect} {a b c : type}
  (f : a -> b -> e c)
  : b -> a -> e c :=

  lam y -> lam x -> f x y
